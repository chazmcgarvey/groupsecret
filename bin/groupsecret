#!perl
# PODNAME: groupsecret
# ABSTRACT: A simple tool for maintaining a shared group secret

=head1 SYNOPSIS

    groupsecret [--version] [--help] [-f <filepath>] [-k <privatekey_path>]
                <command> [<args>]

    groupsecret add-key [--embed] [--update] <publickey_path> ...

    groupsecret delete-key <fingerprint>|<publickey_path> ...

    groupsecret list-keys

    groupsecret set-secret [--keep-passphrase] <path>|-|rand:<num_bytes>

    groupsecret [print-secret] [--no-decrypt]

=head1 DESCRIPTION

L<groupsecret> is a program that makes it easy for groups to share a secret between themselves
without exposing the secret to anyone else. It could be used, for example, by a team to share an
L<ansible-vault(1)> password.

The goal of this program is to be easy to use and have few dependencies (or only have dependencies
users are likely to already have installed).

groupsecret works by encrypting a secret with a symmetric cipher protected by a secure random
passphrase which is itself encrypted by one or more SSH2 RSA public keys. Only those who have access
to one of the corresponding private keys are able to decrypt the passphrase and access the secret.

The encrypted secret and passphrase are stored in a single keyfile. You can even commit the keyfile
in a public repo or in a private repo where some untrusted users may have read access; the secret is
locked away to all except those with a private key to a corresponding public key that has been added
to the keyfile.

The keyfile is just a YAML file, so it's human-readable (except of course for the encrypted parts).
This make it easy to add to version control and work with diffs. You can edit the keyfile by hand if
you learn its very simple structure, but this program makes it even easier to manage the keyfile.

=head1 OPTIONS

=head2 --version

Print the program name and version to C<STDOUT>, and exit.

Alias: C<-v>

=head2 --help

Print the synopsis to C<STDOUT>, and exit.

Alias: C<-h>

=head2 --file=path

Specify a path to a keyfile which stores a secret and keys.

Defaults to the value of the environment variable L</GROUPSECRET_KEYFILE> or F<groupsecret.yml>.

Alias: C<-f>

=head2 --private-key=path

Specify a path to a PEM private key. This is used by some commands to decrypt the passphrase that
protects the secret and is ignored by commands that don't need it.

Defaults to the value of the environment variable L</GROUPSECRET_PRIVATE_KEY> or F<~/.ssh/id_rsa>.

Alias: C<-k>

=head1 COMMANDS

=head2 add-key

    groupsecret add-key path/to/mykey_rsa.pub

Adds one or more SSH2 RSA public keys to a keyfile. This allows the secret contained within the
keyfile to be accessed by whoever has the corresponding private key.

If the C<--embed> option is used, the public keys will be embeded in the keyfile. This may be
a useful way to make sure the actual keys are available in the future since they could be needed to
encrypt a new passphrase if it ever needs to be changed. Keys that are not embedded will be searched
for in the filesystem; see L</GROUPSECRET_PATH>.

If the C<--update> option is used and a key with the same fingerprint is added, the new key will
replace the existing key. The default behavior is to skip existing keys.

If the keyfile is storing a secret, the passphrase protecting the secret will need to be decrypted
so that access to the secret can be shared with the new key(s).

Alias: C<add-keys>

=head2 delete-key

    groupsecret delete-key MD5:89:b3:fb:76:6c:f9:56:8e:a8:1a:df:ba:1c:ba:7d:05
    groupsecret delete-key path/to/mykey_rsa.pub

Deletes one or more keys from a keyfile. This prevents the secret contained within the keyfile from
being accessed by whoever has the corresponding private key.

Of course, if the owners of the key(s) being removed have already had access to the keyfile prior to
their keys being removed, the secret is already exposed to them. It usually makes sense to follow up
this command with a L</set-secret> command in order to change the secret.

Aliases: C<delete-keys>, C<remove-key>, C<remove-keys>

=head2 list-keys

    groupsecret list-keys

Prints the keys that have access to the secret contained in the keyfile to C<STDOUT>, one per line
in the following format:

    <fingerprint> <comment>

=head2 set-secret

    groupsecret set-secret path/to/secretfile.txt
    groupsecret set-secret - <<END
    > it's a secret to everybody
    > END
    groupsecret set-secret rand:48

Set or update the secret contained in a keyfile. The argument allows you to add a secret from
a file, from <STDIN>, or from a stream of secure random bytes.

If the keyfile already contains a secret, it will be replaced by the new secret. A keyfile can only
contain one secret at a time. If you think you want to store more than one secret at a time, store
a tarball instead.

By default, this will also change the passphrase protecting the secret and re-encrypt the passphrase
for each key currently in the keyfile. This requires all of the public keys to be available (see
L</GROUPSECRET_PATH>). If for some reason you want to protect the new secret with the current
passphrase, use the C<--keep-passphrase> option; this can be done without the public keys being
available, but it will require a private key to decrypt the passphrase.

Aliases: C<change-secret>, C<update-secret>

=head2 print-secret

    groupsecret print-secret
    groupsecret print-secret --no-decrypt

Print the secret contained in the keyfile to C<STDOUT>.

If the C<--no-decrypt> option is used, the secret will be printed in its encrypted form.

This requires a private key.

Aliases: (no command), C<show-secret>

=head1 REQUIREMENTS

=for :list
* L<OpenSSH|https://www.openssh.com> (commands: L<ssh-keygen(1)>)
* L<OpenSSL|https://www.openssl.org> (commands: L<openssl(1)>)

=head1 INSTALL

There are a few ways to install groupsecret to your system. First, make sure you first have the
L</REQUIREMENTS> installed.

=head2 Using cpanm

You can install groupsecret using L<cpanm>. If you have a local perl (plenv, perlbrew, etc.), you
can just do this:

    cpanm App::GroupSecret

to install the F<groupsecret> executable and its Perl module dependencies. The executable will be
installed to your perl's bin path, like F<~/perl5/perlbrew/bin/groupsecret>.

If you're installing to your system perl, you can do:

    cpanm --sudo App::GroupSecret

to install the F<groupsecret> executable to a system directory, like F</usr/local/bin/groupsecret>
(depending on your perl).

=head2 For developers

If you're a developer and want to hack on the source, clone the repository and pull the
dependencies:

    git clone https://github.com/chazmcgarvey/groupsecret.git
    cd groupsecret
    cpanm Dist::Zilla
    dzil authordeps --missing | cpanm
    dzil listdeps --author --develop --missing | cpanm

=head1 ENVIRONMENT

=head2 GROUPSECRET_KEYFILE

If set, this program will use the value as a path to the keyfile. The L</--file=path> option takes
precedence if it is used.

=head2 GROUPSECRET_PRIVATE_KEY

If set, this program will use the value as a path to the keyfile. The L</--private-key=path> option
takes precedence if it is used.

=head2 GROUPSECRET_PATH

The value of this variable should be a colon-separated list of directories in which to search for
public keys. By default, the actual keys are not embedded in keyfiles, but they may be needed to
encrypt a new passphrase if it ever needs to be changed. Keys that are not embedded will be searched
for in the filesystem based on the value of this environment variable.

Defaults to C<.:keys:$HOME/.ssh>.

=cut

use warnings FATAL => 'all';
use strict;

our $VERSION = '9999.999'; # VERSION

use App::GroupSecret;

App::GroupSecret->new->main(@ARGV);
exit;
